cmake_minimum_required(VERSION 3.10)
project(fast_transformers)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 14)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

option(CUDA_VERSION "Set cuda version of torch, in (`92`, `101`), default is None" NONE)
option(WITH_PROFILER  "Compile with gperftools" OFF)
set(MKLROOT "/opt/intel/mkl" CACHE PATH "The mkl library root")
set(BLAS_PROVIDER "mkl" CACHE STRING "Set the blas provider library, in [openblas, mkl]")

if (${CMAKE_CXX_COMPILER_ID} STREQUAL Intel)
  message(STATUS "Fast Transformer is built with a intel compiler!")
  add_definitions(-D__USE_INTEL_COMPILER__)
endif()
add_subdirectory(3rd)
enable_testing()

find_package(OpenMP)
if (OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    message(STATUS "OpenMP USED FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
else ()
    message(WARNING "OpenMP is not supported by the compiler")
endif()

message(STATUS "Blas provider is ${BLAS_PROVIDER}")

if (${BLAS_PROVIDER} STREQUAL "mkl")
    find_package(MKL REQUIRED)
    message(STATUS ${find_package})
elseif(${BLAS_PROVIDER} STREQUAL "openblas")
    message(SEND_ERROR "Not implemented")
else()
    message(SEND_ERROR "Blas Provider must in (openblas, mkl)")
endif ()

if(WITH_PROFILER)
    find_package(Gperftools REQUIRED)
    include_directories(${GPERFTOOLS_INCLUDE_DIR})
    add_definitions(-DWITH_GPERFTOOLS)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
add_subdirectory(fast_transformers)
