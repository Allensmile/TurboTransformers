cmake_minimum_required(VERSION 3.14)
project(fast_transformers)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 14)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

option(CUDA_VERSION "Set cuda version of torch, in (`92`, `101`), default is None" NONE)
option(OPENMP_ENDABLE "Build with OpenMP" ON)
option(MKL_ENABLE "Build with MKL" OFF)
option(WITH_PROFILER  "Compile with gperftools" OFF)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL Intel)
  message(STATUS ">>>>> Fast Transformer is built with a intel compiler!")
  add_definitions(-D__USE_INTEL_COMPILER__)
endif()
add_subdirectory(3rd)
enable_testing()


if (MKL_ENABLE)
    SET(INTEL_COMPILER_DIR "/home/jiaruifang/" CACHE STRING "Root directory of the Intel Compiler Suite (contains ipp, mkl, etc.)")
    SET(INTEL_MKL_DIR "/home/jiaruifang/intel/mkl" CACHE STRING "Root directory of the Intel MKL (standalone)")
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
    find_package(MKL)
    if(${MKL_FOUND})
        include_directories("${MKL_INCLUDE_DIR}")
    endif()
endif()

if (OPENMP_ENDABLE)
    find_package(OpenMP)
    if (OPENMP_FOUND)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
        message(STATUS "OpenMP USED FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    else ()
        message(WARNING "OpenMP is not supported by the compiler")
    endif ()
else ()
    message(STATUS "OpenMP is not used")
endif ()

if(WITH_PROFILER)
    find_package(Gperftools REQUIRED)
    include_directories(${GPERFTOOLS_INCLUDE_DIR})
    add_definitions(-DWITH_GPERFTOOLS)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
add_subdirectory(fast_transformers)
